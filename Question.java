/*
 * AvailabilityPanel.java
 * CS230 Final Project 
 * Andrea Leon, Emily Van Laarhoven, Emma Postel
 * Demo date: 12/13/16
 */

//written by Emily Van Laarhoven

//import from javafoundations - note: I edited this class
import javafoundations.PriorityQueue;

public class Question {
  
  //instance vars
  private int index; //note that this was only used in testing
  private String q;
  private String a;
  private String b;
  private Club [] clubs;
  
  //constructor - takes in index for testing and pieces of question
  public Question(int index, String q, String a, String b) {
    this.index = index;
    this.q = q;
    this.a = a;
    this.b = b;
    clubs = null; //set clubs to null, use setter for leaves
  }
  
  /*
   * sets the clubs instance variable to pertinent clubs in tree
   * @param: Club[]
   */
  public void setClubs(Club[] clubs) {
    this.clubs = clubs;
  }
  
  //Getters
  
  /*
   * @returns: Club[] list of clubs stored in leaf 
   * returns null if invoke on non-leaf
   */
  public Club[] getClubs() {
    if (this.clubs==null) {
      System.out.println("There are no clubs stored at this level");
    }
    return this.clubs;
  }
  
  /*
   * @returns: String text of question, ie "Do you prefer"
   */
  public String getQuestion() {
    return this.q;
  }
  
  /*
   * @returns: String text of question, ie "a) sports"
   */
  public String getAnsA() {
    return this.a;
  }
  
   /*
   * @returns: String text of question, ie "b) performance art"
   */
  public String getAnsB() {
    return this.b;
  }
  
  /*
   * @returns: String representation of question
   */
  public String toString() {
    if (clubs==null) {
      return "Question "+index+" is: "+q+a+" or "+b+"\n";
    } else {
      String s = "";
      for (int i=0; i<clubs.length; i++) {
        s += (clubs[i])+"\n";
      }
      return s;
    }
  }
  
  /*
   * takes in the user's weighted preferences (in integer array in order of
   * (collab, off campus, rigor of app) and the list of clubs generated by the 
   * tree and returns a priority queue of clubs ordered with respect to weighted
   * preferences (similar to GradSchools pset)
   * @param: Integer[] preferences from 1-10 in order of input
   * @returns: PriorityQueue<Question> prioritized clubs 
   */
  public PriorityQueue<Club> prioritize (Integer[] pref) {
    PriorityQueue<Club> pq = new PriorityQueue<Club>(); 
    for (int i=0; i<this.getClubs().length; i++) {
      Club club = this.getClubs()[i];
      int collab = club.getCollab();
      int offCampus = club.getOffPeople();
      int appRigor = club.getAppRigor();
      //note that composite involves integer division (rounds down)
      int composite = (pref[0]*collab+pref[1]*offCampus+pref[2]*appRigor)/3; 
      club.setComposite(composite);  //club implements comparable using composite value
      pq.enqueue(club); //enqueue into priority queue once composite is set
    }
    return pq; 
  }
  
  //main method for testing
  public static void main (String [] args) {
   //testing deleted for conciseness (scripts saved on Emily computer) 
  }
}
                                
   